{%- set union_type_names = union_types | map(attribute='name') | list %}
{%- for field in fields %}
{%- set is_union = get_type(field.type, strip_class=True) in union_type_names %}
{%- set union_type = [None] %}
{%- if is_union -%}
    {%- for union_type_ in union_types %}
        {%- if union_type_.name == get_type(field.type, strip_class=True) %}
            {%- set _ = union_type.append(union_type_) %}
        {%- endif %}
    {%- endfor -%}
{%- endif -%}
class {{ camelize(field.name) }}RootSelection:
    def __init__(self, client: 'Client', schema: DSLSchema, query: Any, **kwargs) -> None:
        {{ 'graphql_kwargs = {'}}{{ camelize(field.name) + constants.queryable_field.__str__() }}{{'.__graphql_map__'}}[k]: (v if not isinstance(v, InputType) else v.to_graphql(schema))
                          for k, v in kwargs.items() if v != EMPTY}
        self.query = query
        if graphql_kwargs:
            self.query = self.query(**graphql_kwargs)
        self.schema = schema
        self.client = client

    {% set type_name = get_type(field.type, strip_class=True) -%}
    {% set field_type = get_type(field.type, strip_class=True, suffix='Field') -%}
    def select(self, *fields: {{ field_type }}) -> Executable:
        graphql_fields = [f.field_name for f in fields if isinstance(f, {{ field_type }})]
        nested_fields = []
        for f in fields:
            if isinstance(f, {{ field_type }}):
                continue
            if f.calling_field is not None:
                nested_fields.append(f.finish_select(getattr(self.schema.{{ field_type | replace('Field', '') }}, f.calling_field), self.schema))
            else:
                fragment = DSLInlineFragment()
                nested_fields.append(f.finish_select(fragment.on(getattr(self.schema, f.__class__.__name__.replace('{{ constants.selection }}', ''))), self.schema))
        self.query = self.query.select(*[getattr(self.schema.{{ type_name }}, f) for f in graphql_fields],
                                       *nested_fields)
        return Executable(self)

{%- set return_type = camelize(field.name) + constants.root_selection.__str__() %}


class {{ camelize(field.name) }}QueryableField(QueryableField):
    {{ '__graphql_map__ = {' }}{%  for arg in field.args %}
        '{{ underscore(arg) }}': '{{ arg }}'{% if not loop.last %}{{ ', ' }}{% endif %}
    {%- endfor %}
    {{ '}' }}

    def __call__({{ 'self, *args, ' }}{%- for name, arg in field.args.items() -%}
        {{ underscore(name) }}{{ ': ' }}{{ get_type(arg.type) }}
    {%- if 'Optional' in get_type(arg.type) %}{{ ' = EMPTY' }}{% endif -%}
    {%- if not loop.last %}{{ ', ' }}{% endif %}
{%- endfor -%}) -> {{ return_type }}:
        return super().__call__(*args, return_type={{ return_type }}, {% for name in field.args -%}
    {{ underscore(name) }}={{ underscore(name) }}{% if not loop.last %}{{ ', ' }}{% endif %}
{%- endfor %})


{% endfor %}