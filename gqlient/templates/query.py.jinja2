import asyncio
import enum
from dataclasses import dataclass
from functools import partial
from graphql import print_ast
from typing import Any, Dict, ForwardRef, Generic, List, Optional, Type, TypeVar, Union, overload, _eval_type

import gql
from gql.dsl import DSLSchema, dsl_gql, DSLInlineFragment, DSLQuery
from gql.transport.aiohttp import AIOHTTPTransport


class Empty:
    pass


EMPTY = Empty


class Executable:
    def __init__(self, selection):
        self._query = selection.query
        self.client = selection.client

    @property
    def query_ast(self):
        return dsl_gql(DSLQuery(self._query))

    @property
    def query(self) -> str:
        return print_ast(self.query_ast)

    def execute(self) -> Dict[str, Any]:
        return self.client.client.execute(self.query_ast)


class QueryableField:
    def __call__(self, *args, return_type: Type, **kwargs):
        client, schema, query, *_ = args
        return return_type(client, schema, query, **kwargs)


class GeneratedType(type):
    Field: type


class GeneratedUnionType(GeneratedType):
    def __getattr__(self, item):
        if item == 'on':
            return self.OnFragment
        return getattr(super(), item)


class GeneratedInterfaceType(GeneratedType):
    def __getattr__(self, item):
        if item == 'on':
            return self.OnFragment
        return getattr(super(), item)


class InputType:
    pass


def partial_select(field_factories: List[Any]):
    def select(calling_field: Any, schema: DSLSchema):
        return calling_field.select(*[factory(schema) for factory in field_factories])
    return select

{%- include 'enum_types.py.jinja2' %}

{%- include 'all_types.py.jinja2' %}

{%- include 'input_types.py.jinja2' %}

{%- include 'queryable_types.py.jinja2' %}

class Query:
    {{'__graphql_map__ = {'}}{%  for field in fields %}
        '{{ underscore(field.name) }}': '{{ field.name }}'{% if not loop.last %}{{ ', ' }}{% endif %}
    {%- endfor %}
    }

    def __init__(self, client: 'Client') -> None:
        self.schema = client.schema
        self.client = client

    def __getattribute__(self, item):
        if item == '__annotations__':
            return super(Query, self).__getattribute__(item)
        item_type = self.__annotations__.get(item)
        if not item_type or not issubclass(item_type, QueryableField):
            return super(Query, self).__getattribute__(item)
        field = super().__getattribute__(item)
        graphql_name = self.__graphql_map__.get(item)
        return partial(field, self.client, self.schema, getattr(self.schema.Query, graphql_name))

{% set union_type_names = union_types | map(attribute='name') | list %}
{%- for field in fields -%}
{%- set is_union = get_type(field.type, strip_class=True) in union_type_names %}
{%- if is_union %}
    {%- set f_type = camelize(field.name + constants.queryable_field.__str__()) -%}
{%- else %}
    {%- set f_type = camelize(field.name + constants.queryable_field.__str__()) -%}
{%- endif -%}
    {{ '    ' }}{{ underscore(field.name) }}: {{ f_type }} = {{ f_type }}()
{% endfor %}

class Client:
    def __init__(self, url: str, **kwargs):
        self.client = gql.Client(transport=AIOHTTPTransport(url=url, **kwargs))
        self.graphql_schema = None
        self.schema = None
        asyncio.run(self.load_schema())

    async def load_schema(self):
        async with self.client as s:
            await s.fetch_schema()
        self.graphql_schema = self.client.schema
        self.schema = DSLSchema(self.graphql_schema)

    @property
    def query(self) -> Query:
        return Query(client=self)

